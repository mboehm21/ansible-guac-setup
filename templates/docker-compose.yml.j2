---

version: '2.3'

networks:
  {{ docker_network_name }}:
    driver: bridge
{% if docker_network_cidr is defined %}
    ipam:
      config:
        - subnet: {{ docker_network_cidr }}
{% endif %}

services:
  guac_db:
    container_name: guac_mysql
    hostname: guac_mysql
    image: mysql:{{ docker_mysql_version | default("latest") }}
    user: {{ docker_mysql_user_id }}:{{ docker_mysql_user_id }}
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: guacamole_db
      MYSQL_ROOT_PASSWORD: {{ mysql_root_password }}
      MYSQL_USER: guacamole_user
      MYSQL_PASSWORD: {{ mysql_password }}
    networks:
      {{ docker_network_name }}:
    volumes:
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql:ro
{% if docker_mysql_persistence %}
      - ./mysql_data/:/var/lib/mysql/:rw
{% endif %}

  guacd:
    container_name: guacd
    hostname: guacd
    image: guacamole/guacd:{{ docker_guacd_version | default("latest") }}
    networks:
      {{ docker_network_name }}:
    restart: unless-stopped

  guacamole:
    container_name: guacamole
    hostname: guacamole
    image: guacamole/guacamole:{{ docker_guacamole_version | default("latest") }}
    depends_on:
      - guacd
      - guac_db
    restart: unless-stopped
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: guac_db
      MYSQL_PORT: 3306
      MYSQL_DATABASE: guacamole_db
      MYSQL_USER: guacamole_user
      MYSQL_PASSWORD: {{ mysql_password }}
    networks:
      {{ docker_network_name }}:
    ports:
      - {{ docker_guacamole_exposed_port | default(8080) }}:8080/tcp

{% for ts in terminalserver_containers %}
  {{ ts }}:
    container_name: {{ ts }}
    hostname: {{ ts }}
    image: danielguerra/ubuntu-xrdp:{{ docker_xrdp_version | default("latest") }}
    restart: unless-stopped
    shm_size: 1g
    volumes:
      - /etc/ssl/certs/:/etc/ssl/certs/:ro
      - ./docker-entrypoint.sh:/usr/bin/docker-entrypoint.sh:ro
      - ./users.list:/etc/users.list:ro
    environment:
      CERTIFICATE_SUBJECT: "/C=DE/ST=Bavaria/L=Nuremberg/O=DT Technik GmbH/OU=T-GIP/CN={{ ts }}"
    networks:
      {{ docker_network_name }}:
    healthcheck:
      test: ["CMD-SHELL", "bash -c 'echo '' > /dev/tcp/127.0.0.1/22 && echo '' > /dev/tcp/127.0.0.1/3389'"]
      interval: 1m
      timeout: 5s
      retries: 5
      start_period: 3m

{% endfor %}
